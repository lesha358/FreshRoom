import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

export async function POST(req: Request) {
  const formData = await req.formData();
  const name = String(formData.get("name") || "");
  const phone = String(formData.get("phone") || "");
  const details = String(formData.get("details") || "");
  const calculationData = formData.get("calculationData");

  const lead = { 
    name, 
    phone, 
    details, 
    calculationData: calculationData ? JSON.parse(String(calculationData)) : null,
    createdAt: new Date().toISOString() 
  };

  // –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –±—ç–∫–∞–ø–∞
  console.log("FreshRoom lead:", lead);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏
  const subject = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ FreshRoom`;
  
  const text = [
    `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:`,
    `–ò–º—è: ${name || "‚Äî"}`,
    `–¢–µ–ª–µ—Ñ–æ–Ω: ${phone || "‚Äî"}`,
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (lead.calculationData) {
    const calc = lead.calculationData;
    text.push(
      ``,
      `üìä –î–ê–ù–ù–´–ï –†–ê–°–ß–Å–¢–ê:`,
      `–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è: ${calc.propertyType === 'apartment' ? '–ö–≤–∞—Ä—Ç–∏—Ä–∞' : calc.propertyType === 'house' ? '–î–æ–º' : '–û—Ñ–∏—Å'}`,
      `–ü–ª–æ—â–∞–¥—å: ${calc.area} –º¬≤`,
      `–ö–æ–º–Ω–∞—Ç: ${calc.rooms}`,
      `–¢–∏–ø —É–±–æ—Ä–∫–∏: ${calc.cleaningType === 'regular' ? '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è' : calc.cleaningType === 'deep' ? '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è' : '–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞'}`,
      `–î–æ–ø. —É—Å–ª—É–≥–∏: ${calc.additionalServices.length} —à—Ç.`,
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${calc.totalPrice.toLocaleString()} ‚ÇΩ`
    );
  }

  text.push(
    details ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${details}` : undefined,
    `–í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}`
  );

  const finalText = text.filter(Boolean).join("\n");

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (—á–µ—Ä–µ–∑ –±–æ—Ç–∞)
  const sendTelegram = async () => {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID; // –Ω–∞–ø—Ä–∏–º–µ—Ä, ID @miya_b
    console.log("Telegram config:", { token: token ? "SET" : "NOT SET", chatId });
    if (!token || !chatId) {
      console.log("Telegram: Missing config, skipping");
      return;
    }
    try {
      const url = `https://api.telegram.org/bot${token}/sendMessage`;
      const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: chatId, text: finalText, parse_mode: "HTML" }),
      });
      const result = await response.json();
      console.log("Telegram result:", result);
    } catch (error) {
      console.error("Telegram error:", error);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É —á–µ—Ä–µ–∑ Gmail (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è App Password)
  const sendEmail = async () => {
    const user = process.env.GMAIL_USER;
    const pass = process.env.GMAIL_PASS; // App Password –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Google
    const to = process.env.MAIL_TO || "chaplinrus@gmail.com";
    console.log("Email config:", { user, pass: pass ? "SET" : "NOT SET", to });
    if (!user || !pass) {
      console.log("Email: Missing config, skipping");
      return;
    }

    try {
      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: { user, pass },
      });

      const result = await transporter.sendMail({
        from: `FreshRoom <${user}>`,
        to,
        subject,
        text: finalText,
      });
      console.log("Email sent:", result.messageId);
    } catch (error) {
      console.error("Email error:", error);
    }
  };

  await Promise.allSettled([sendTelegram(), sendEmail()]);

  return NextResponse.json({ ok: true });
}


